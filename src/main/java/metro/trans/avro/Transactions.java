/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package metro.trans.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1266666707098555351L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transactions\",\"namespace\":\"metro.trans.avro\",\"fields\":[{\"name\":\"businessKey\",\"type\":{\"type\":\"record\",\"name\":\"BusinessKey\",\"fields\":[{\"name\":\"TxId\",\"type\":\"string\"}]}},{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"MetaData\",\"fields\":[{\"name\":\"msgType\",\"type\":\"string\"},{\"name\":\"mdInsertDtTm\",\"type\":\"string\"}]}},{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"tranactionId\",\"type\":\"string\"},{\"name\":\"dataPayLoad\",\"type\":{\"type\":\"record\",\"name\":\"Details\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transactions> ENCODER =
      new BinaryMessageEncoder<Transactions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transactions> DECODER =
      new BinaryMessageDecoder<Transactions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transactions> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transactions>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transactions to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transactions from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transactions instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private metro.trans.avro.BusinessKey businessKey;
   private metro.trans.avro.MetaData metadata;
   private java.lang.CharSequence accountId;
   private java.lang.CharSequence tranactionId;
   private metro.trans.avro.Details dataPayLoad;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transactions() {}

  /**
   * All-args constructor.
   * @param businessKey The new value for businessKey
   * @param metadata The new value for metadata
   * @param accountId The new value for accountId
   * @param tranactionId The new value for tranactionId
   * @param dataPayLoad The new value for dataPayLoad
   */
  public Transactions(metro.trans.avro.BusinessKey businessKey, metro.trans.avro.MetaData metadata, java.lang.CharSequence accountId, java.lang.CharSequence tranactionId, metro.trans.avro.Details dataPayLoad) {
    this.businessKey = businessKey;
    this.metadata = metadata;
    this.accountId = accountId;
    this.tranactionId = tranactionId;
    this.dataPayLoad = dataPayLoad;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return businessKey;
    case 1: return metadata;
    case 2: return accountId;
    case 3: return tranactionId;
    case 4: return dataPayLoad;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: businessKey = (metro.trans.avro.BusinessKey)value$; break;
    case 1: metadata = (metro.trans.avro.MetaData)value$; break;
    case 2: accountId = (java.lang.CharSequence)value$; break;
    case 3: tranactionId = (java.lang.CharSequence)value$; break;
    case 4: dataPayLoad = (metro.trans.avro.Details)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'businessKey' field.
   * @return The value of the 'businessKey' field.
   */
  public metro.trans.avro.BusinessKey getBusinessKey() {
    return businessKey;
  }


  /**
   * Sets the value of the 'businessKey' field.
   * @param value the value to set.
   */
  public void setBusinessKey(metro.trans.avro.BusinessKey value) {
    this.businessKey = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public metro.trans.avro.MetaData getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(metro.trans.avro.MetaData value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public java.lang.CharSequence getAccountId() {
    return accountId;
  }


  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.CharSequence value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'tranactionId' field.
   * @return The value of the 'tranactionId' field.
   */
  public java.lang.CharSequence getTranactionId() {
    return tranactionId;
  }


  /**
   * Sets the value of the 'tranactionId' field.
   * @param value the value to set.
   */
  public void setTranactionId(java.lang.CharSequence value) {
    this.tranactionId = value;
  }

  /**
   * Gets the value of the 'dataPayLoad' field.
   * @return The value of the 'dataPayLoad' field.
   */
  public metro.trans.avro.Details getDataPayLoad() {
    return dataPayLoad;
  }


  /**
   * Sets the value of the 'dataPayLoad' field.
   * @param value the value to set.
   */
  public void setDataPayLoad(metro.trans.avro.Details value) {
    this.dataPayLoad = value;
  }

  /**
   * Creates a new Transactions RecordBuilder.
   * @return A new Transactions RecordBuilder
   */
  public static metro.trans.avro.Transactions.Builder newBuilder() {
    return new metro.trans.avro.Transactions.Builder();
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transactions RecordBuilder
   */
  public static metro.trans.avro.Transactions.Builder newBuilder(metro.trans.avro.Transactions.Builder other) {
    if (other == null) {
      return new metro.trans.avro.Transactions.Builder();
    } else {
      return new metro.trans.avro.Transactions.Builder(other);
    }
  }

  /**
   * Creates a new Transactions RecordBuilder by copying an existing Transactions instance.
   * @param other The existing instance to copy.
   * @return A new Transactions RecordBuilder
   */
  public static metro.trans.avro.Transactions.Builder newBuilder(metro.trans.avro.Transactions other) {
    if (other == null) {
      return new metro.trans.avro.Transactions.Builder();
    } else {
      return new metro.trans.avro.Transactions.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transactions instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transactions>
    implements org.apache.avro.data.RecordBuilder<Transactions> {

    private metro.trans.avro.BusinessKey businessKey;
    private metro.trans.avro.BusinessKey.Builder businessKeyBuilder;
    private metro.trans.avro.MetaData metadata;
    private metro.trans.avro.MetaData.Builder metadataBuilder;
    private java.lang.CharSequence accountId;
    private java.lang.CharSequence tranactionId;
    private metro.trans.avro.Details dataPayLoad;
    private metro.trans.avro.Details.Builder dataPayLoadBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(metro.trans.avro.Transactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.businessKey)) {
        this.businessKey = data().deepCopy(fields()[0].schema(), other.businessKey);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBusinessKeyBuilder()) {
        this.businessKeyBuilder = metro.trans.avro.BusinessKey.newBuilder(other.getBusinessKeyBuilder());
      }
      if (isValidValue(fields()[1], other.metadata)) {
        this.metadata = data().deepCopy(fields()[1].schema(), other.metadata);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMetadataBuilder()) {
        this.metadataBuilder = metro.trans.avro.MetaData.newBuilder(other.getMetadataBuilder());
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tranactionId)) {
        this.tranactionId = data().deepCopy(fields()[3].schema(), other.tranactionId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dataPayLoad)) {
        this.dataPayLoad = data().deepCopy(fields()[4].schema(), other.dataPayLoad);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasDataPayLoadBuilder()) {
        this.dataPayLoadBuilder = metro.trans.avro.Details.newBuilder(other.getDataPayLoadBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Transactions instance
     * @param other The existing instance to copy.
     */
    private Builder(metro.trans.avro.Transactions other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.businessKey)) {
        this.businessKey = data().deepCopy(fields()[0].schema(), other.businessKey);
        fieldSetFlags()[0] = true;
      }
      this.businessKeyBuilder = null;
      if (isValidValue(fields()[1], other.metadata)) {
        this.metadata = data().deepCopy(fields()[1].schema(), other.metadata);
        fieldSetFlags()[1] = true;
      }
      this.metadataBuilder = null;
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tranactionId)) {
        this.tranactionId = data().deepCopy(fields()[3].schema(), other.tranactionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dataPayLoad)) {
        this.dataPayLoad = data().deepCopy(fields()[4].schema(), other.dataPayLoad);
        fieldSetFlags()[4] = true;
      }
      this.dataPayLoadBuilder = null;
    }

    /**
      * Gets the value of the 'businessKey' field.
      * @return The value.
      */
    public metro.trans.avro.BusinessKey getBusinessKey() {
      return businessKey;
    }


    /**
      * Sets the value of the 'businessKey' field.
      * @param value The value of 'businessKey'.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder setBusinessKey(metro.trans.avro.BusinessKey value) {
      validate(fields()[0], value);
      this.businessKeyBuilder = null;
      this.businessKey = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'businessKey' field has been set.
      * @return True if the 'businessKey' field has been set, false otherwise.
      */
    public boolean hasBusinessKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'businessKey' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public metro.trans.avro.BusinessKey.Builder getBusinessKeyBuilder() {
      if (businessKeyBuilder == null) {
        if (hasBusinessKey()) {
          setBusinessKeyBuilder(metro.trans.avro.BusinessKey.newBuilder(businessKey));
        } else {
          setBusinessKeyBuilder(metro.trans.avro.BusinessKey.newBuilder());
        }
      }
      return businessKeyBuilder;
    }

    /**
     * Sets the Builder instance for the 'businessKey' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public metro.trans.avro.Transactions.Builder setBusinessKeyBuilder(metro.trans.avro.BusinessKey.Builder value) {
      clearBusinessKey();
      businessKeyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'businessKey' field has an active Builder instance
     * @return True if the 'businessKey' field has an active Builder instance
     */
    public boolean hasBusinessKeyBuilder() {
      return businessKeyBuilder != null;
    }

    /**
      * Clears the value of the 'businessKey' field.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder clearBusinessKey() {
      businessKey = null;
      businessKeyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public metro.trans.avro.MetaData getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder setMetadata(metro.trans.avro.MetaData value) {
      validate(fields()[1], value);
      this.metadataBuilder = null;
      this.metadata = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'metadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public metro.trans.avro.MetaData.Builder getMetadataBuilder() {
      if (metadataBuilder == null) {
        if (hasMetadata()) {
          setMetadataBuilder(metro.trans.avro.MetaData.newBuilder(metadata));
        } else {
          setMetadataBuilder(metro.trans.avro.MetaData.newBuilder());
        }
      }
      return metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'metadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public metro.trans.avro.Transactions.Builder setMetadataBuilder(metro.trans.avro.MetaData.Builder value) {
      clearMetadata();
      metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metadata' field has an active Builder instance
     * @return True if the 'metadata' field has an active Builder instance
     */
    public boolean hasMetadataBuilder() {
      return metadataBuilder != null;
    }

    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder clearMetadata() {
      metadata = null;
      metadataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountId() {
      return accountId;
    }


    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder setAccountId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.accountId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tranactionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTranactionId() {
      return tranactionId;
    }


    /**
      * Sets the value of the 'tranactionId' field.
      * @param value The value of 'tranactionId'.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder setTranactionId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tranactionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tranactionId' field has been set.
      * @return True if the 'tranactionId' field has been set, false otherwise.
      */
    public boolean hasTranactionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tranactionId' field.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder clearTranactionId() {
      tranactionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataPayLoad' field.
      * @return The value.
      */
    public metro.trans.avro.Details getDataPayLoad() {
      return dataPayLoad;
    }


    /**
      * Sets the value of the 'dataPayLoad' field.
      * @param value The value of 'dataPayLoad'.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder setDataPayLoad(metro.trans.avro.Details value) {
      validate(fields()[4], value);
      this.dataPayLoadBuilder = null;
      this.dataPayLoad = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dataPayLoad' field has been set.
      * @return True if the 'dataPayLoad' field has been set, false otherwise.
      */
    public boolean hasDataPayLoad() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'dataPayLoad' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public metro.trans.avro.Details.Builder getDataPayLoadBuilder() {
      if (dataPayLoadBuilder == null) {
        if (hasDataPayLoad()) {
          setDataPayLoadBuilder(metro.trans.avro.Details.newBuilder(dataPayLoad));
        } else {
          setDataPayLoadBuilder(metro.trans.avro.Details.newBuilder());
        }
      }
      return dataPayLoadBuilder;
    }

    /**
     * Sets the Builder instance for the 'dataPayLoad' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public metro.trans.avro.Transactions.Builder setDataPayLoadBuilder(metro.trans.avro.Details.Builder value) {
      clearDataPayLoad();
      dataPayLoadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'dataPayLoad' field has an active Builder instance
     * @return True if the 'dataPayLoad' field has an active Builder instance
     */
    public boolean hasDataPayLoadBuilder() {
      return dataPayLoadBuilder != null;
    }

    /**
      * Clears the value of the 'dataPayLoad' field.
      * @return This builder.
      */
    public metro.trans.avro.Transactions.Builder clearDataPayLoad() {
      dataPayLoad = null;
      dataPayLoadBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transactions build() {
      try {
        Transactions record = new Transactions();
        if (businessKeyBuilder != null) {
          try {
            record.businessKey = this.businessKeyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("businessKey"));
            throw e;
          }
        } else {
          record.businessKey = fieldSetFlags()[0] ? this.businessKey : (metro.trans.avro.BusinessKey) defaultValue(fields()[0]);
        }
        if (metadataBuilder != null) {
          try {
            record.metadata = this.metadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("metadata"));
            throw e;
          }
        } else {
          record.metadata = fieldSetFlags()[1] ? this.metadata : (metro.trans.avro.MetaData) defaultValue(fields()[1]);
        }
        record.accountId = fieldSetFlags()[2] ? this.accountId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tranactionId = fieldSetFlags()[3] ? this.tranactionId : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (dataPayLoadBuilder != null) {
          try {
            record.dataPayLoad = this.dataPayLoadBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("dataPayLoad"));
            throw e;
          }
        } else {
          record.dataPayLoad = fieldSetFlags()[4] ? this.dataPayLoad : (metro.trans.avro.Details) defaultValue(fields()[4]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transactions>
    READER$ = (org.apache.avro.io.DatumReader<Transactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.businessKey.customEncode(out);

    this.metadata.customEncode(out);

    out.writeString(this.accountId);

    out.writeString(this.tranactionId);

    this.dataPayLoad.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.businessKey == null) {
        this.businessKey = new metro.trans.avro.BusinessKey();
      }
      this.businessKey.customDecode(in);

      if (this.metadata == null) {
        this.metadata = new metro.trans.avro.MetaData();
      }
      this.metadata.customDecode(in);

      this.accountId = in.readString(this.accountId instanceof Utf8 ? (Utf8)this.accountId : null);

      this.tranactionId = in.readString(this.tranactionId instanceof Utf8 ? (Utf8)this.tranactionId : null);

      if (this.dataPayLoad == null) {
        this.dataPayLoad = new metro.trans.avro.Details();
      }
      this.dataPayLoad.customDecode(in);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.businessKey == null) {
            this.businessKey = new metro.trans.avro.BusinessKey();
          }
          this.businessKey.customDecode(in);
          break;

        case 1:
          if (this.metadata == null) {
            this.metadata = new metro.trans.avro.MetaData();
          }
          this.metadata.customDecode(in);
          break;

        case 2:
          this.accountId = in.readString(this.accountId instanceof Utf8 ? (Utf8)this.accountId : null);
          break;

        case 3:
          this.tranactionId = in.readString(this.tranactionId instanceof Utf8 ? (Utf8)this.tranactionId : null);
          break;

        case 4:
          if (this.dataPayLoad == null) {
            this.dataPayLoad = new metro.trans.avro.Details();
          }
          this.dataPayLoad.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










